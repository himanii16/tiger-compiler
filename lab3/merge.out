Program( LetExp([
  TypeDec[
   (any,
    record[
     (any,int)])],
  VarDec[  (buffer,[],
  NONE,
   FuncCall(getchar,[]))],
  FuncDec[
   (readint,[
    (any,any)],
   SOME(int),
    LetExp([
     VarDec[     (i,[],
     NONE,
      IntConst(0))],
     FuncDec[
      (isdigit,[
       (s,string)],
      SOME(int),
       BinOpExp(AND,
        BinOpExp(GEQ,
         FuncCall(ord,[
          Lvalue(
           SimpleVar(buffer))]),
         FuncCall(ord,[
          StringConst("0")])),
        BinOpExp(LEQ,
         FuncCall(ord,[
          Lvalue(
           SimpleVar(buffer))]),
         FuncCall(ord,[
          StringConst("9")])))),
      (skipto,[],
      NONE,
       WhileExp(
        BinOpExp(OR,
         BinOpExp(EQ,
          Lvalue(
           SimpleVar(buffer)),
          StringConst(" ")),
         BinOpExp(EQ,
          Lvalue(
           SimpleVar(buffer)),
          StringConst("\n"))),
        AssignExp(
         SimpleVar(buffer),
         FuncCall(getchar,[]))))]],
     SeqExp[
      FuncCall(skipto,[]),
      AssignExp(
       FieldVar(
        SimpleVar(any),
                SimpleVar(any)),
       FuncCall(isdigit,[
        Lvalue(
         SimpleVar(buffer))])),
      WhileExp(
       FuncCall(isdigit,[
        Lvalue(
         SimpleVar(buffer))]),
       SeqExp[
        AssignExp(
         SimpleVar(i),
         BinOpExp(Minus,
          BinOpExp(Plus,
           BinOpExp(Mul,
            Lvalue(
             SimpleVar(i)),
            IntConst(10)),
           FuncCall(ord,[
            Lvalue(
             SimpleVar(buffer))])),
          FuncCall(ord,[
           StringConst("0")]))),
        AssignExp(
         SimpleVar(buffer),
         FuncCall(getchar,[]))]),
      Lvalue(
       SimpleVar(i))]))],
  TypeDec[
   (list,
    record[
     (first,int),
     (rest,list)])],
  FuncDec[
   (readlist,[],
   SOME(list),
    LetExp([
     VarDec[     (any,[],
     NONE,
      RecordExp(any,[

       (any,
        IntConst(0))]))],
     VarDec[     (i,[],
     NONE,
      FuncCall(readint,[
       Lvalue(
        SimpleVar(any))]))]],
     SeqExp[
      IfExp(
       Lvalue(
        FieldVar(
         SimpleVar(any),
                  SimpleVar(any))),
       RecordExp(list,[

        (rest,
         FuncCall(readlist,[])),
        (first,
         Lvalue(
          SimpleVar(i)))]),
       Nil)])),
   (merge,[
    (a,list),
    (b,list)],
   SOME(list),
    IfExp(
     BinOpExp(EQ,
      Lvalue(
       SimpleVar(a)),
      Nil),
     Lvalue(
      SimpleVar(b)),
     IfExp(
      BinOpExp(EQ,
       Lvalue(
        SimpleVar(b)),
       Nil),
      Lvalue(
       SimpleVar(a)),
      IfExp(
       BinOpExp(LT,
        Lvalue(
         FieldVar(
          SimpleVar(a),
                    SimpleVar(first))),
        Lvalue(
         FieldVar(
          SimpleVar(b),
                    SimpleVar(first)))),
       RecordExp(list,[

        (rest,
         FuncCall(merge,[
          Lvalue(
           FieldVar(
            SimpleVar(a),
                        SimpleVar(rest))),
          Lvalue(
           SimpleVar(b))])),
        (first,
         Lvalue(
          FieldVar(
           SimpleVar(a),
                      SimpleVar(first))))]),
       RecordExp(list,[

        (rest,
         FuncCall(merge,[
          Lvalue(
           SimpleVar(a)),
          Lvalue(
           FieldVar(
            SimpleVar(b),
                        SimpleVar(rest)))])),
        (first,
         Lvalue(
          FieldVar(
           SimpleVar(b),
                      SimpleVar(first))))]))))),
   (printint,[
    (i,int)],
   NONE,
    LetExp([
     FuncDec[
      (f,[
       (i,int)],
      NONE,
       IfExp(
        BinOpExp(GT,
         Lvalue(
          SimpleVar(i)),
         IntConst(0)),
        SeqExp[
         FuncCall(f,[
          BinOpExp(Div,
           Lvalue(
            SimpleVar(i)),
           IntConst(10))]),
         FuncCall(print,[
          FuncCall(chr,[
           BinOpExp(Plus,
            BinOpExp(Minus,
             Lvalue(
              SimpleVar(i)),
             BinOpExp(Mul,
              BinOpExp(Div,
               Lvalue(
                SimpleVar(i)),
               IntConst(10)),
              IntConst(10))),
            FuncCall(ord,[
             StringConst("0")]))])])]))]],
     SeqExp[
      IfExp(
       BinOpExp(LT,
        Lvalue(
         SimpleVar(i)),
        IntConst(0)),
       SeqExp[
        FuncCall(print,[
         StringConst("-")]),
        FuncCall(f,[
         NegativeExp(          Lvalue(
           SimpleVar(i)))])],
       IfExp(
        BinOpExp(GT,
         Lvalue(
          SimpleVar(i)),
         IntConst(0)),
        FuncCall(f,[
         Lvalue(
          SimpleVar(i))]),
        FuncCall(print,[
         StringConst("0")])))])),
   (printlist,[
    (l,list)],
   NONE,
    IfExp(
     BinOpExp(EQ,
      Lvalue(
       SimpleVar(l)),
      Nil),
     FuncCall(print,[
      StringConst("\n")]),
     SeqExp[
      FuncCall(printint,[
       Lvalue(
        FieldVar(
         SimpleVar(l),
                  SimpleVar(first)))]),
      FuncCall(print,[
       StringConst(" ")]),
      FuncCall(printlist,[
       Lvalue(
        FieldVar(
         SimpleVar(l),
                  SimpleVar(rest)))])]))],
  VarDec[  (list1,[],
  NONE,
   FuncCall(readlist,[]))],
  VarDec[  (list2,[],
  NONE,
   SeqExp[
    AssignExp(
     SimpleVar(buffer),
     FuncCall(getchar,[])),
    FuncCall(readlist,[])])]],
  SeqExp[
   FuncCall(printlist,[
    FuncCall(merge,[
     Lvalue(
      SimpleVar(list1)),
     Lvalue(
      SimpleVar(list2))])])]))
