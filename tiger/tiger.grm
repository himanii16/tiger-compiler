(* user declaration here *)

%%
(* parser declarations *)
%pos int
%eop EOF  (* end of parsing *)
%verbose  (* Generates a printed form of the table in expr.grm.desc *)
%pure
%name Tiger

(* BRAC - [] , BRACE - {} , PAREN - ()*)

%term NIL 
    | ID of Ast.id
    | INT of int
    | STRING of string
    | MUL | DIV | PLUS | MINUS | GEQ | LEQ | EQ | NEQ | GT | LT | AND | OR
    | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
    | BREAK | FUNCTION | VAR | TYPE | IMPORT | PRIMITIVE | ASSIGN 
    | COLON | SEMICOLON | LBRAC | RBRAC | LPAREN | RPAREN | LBRACE | RBRACE  
    | COMMA | DOT | EOF 

%nonterm EXP     of Ast.exp 
       | EXPS    of Ast.exp list
       | DEC     of Ast.dec
       | DECS    of Ast.dec list
       | PROGRAM of Ast.program  
       | PARAM   of Ast.exp list
       | LVALUE  of Ast.var
       | RECORD  of Ast.exp
       | ARGS    of (Ast.id * Ast.exp) list
       | TYPEDEC of (Ast.id * Ast.typ) list
       | FUNCDEC  of Ast.funcfield list
       | VARDEC  of Ast.varfield
       | TY      of Ast.typ
       | TYFIELD of Ast.tyfield list

%start PROGRAM

%noshift EOF 

%nonassoc ID
%left LPAREN RPAREN
%nonassoc ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ LT LEQ GT GEQ
%left PLUS MINUS
%left MUL DIV
%left LBRAC RBRAC LBRACE RBRACE
%nonassoc SEMICOLON 
%nonassoc THEN
%nonassoc ELSE
%nonassoc DO
%nonassoc OF
%nonassoc TYPE
%nonassoc FUNCTION

%prefer THEN ELSE LPAREN

%%
(* grammar rules *)

PROGRAM : EXP                 (Ast.Expression EXP)

EXPS :                         ([])
     | EXP                     ([EXP])
     | EXP SEMICOLON EXPS      (EXP :: EXPS)

EXP : NIL                   (Ast.Nil)
    | STRING                (Ast.StringConst STRING)
    | INT                   (Ast.IntConst INT)
    | LVALUE                (Ast.Lvalue LVALUE)
    | RECORD                (RECORD)
    | MINUS EXP             (Ast.NegativeExp EXP)
    | EXP PLUS EXP          (Ast.BinOpExp ({left = EXP1, oper = Ast.Plus, right = EXP2}))
    | EXP MINUS EXP         (Ast.BinOpExp ({left = EXP1, oper = Ast.Minus, right = EXP2}))
    | EXP MUL EXP           (Ast.BinOpExp ({left = EXP1, oper = Ast.Mul, right = EXP2}))
    | EXP DIV EXP           (Ast.BinOpExp ({left = EXP1, oper = Ast.Div, right = EXP2}))
    | EXP GEQ EXP           (Ast.BinOpExp ({left = EXP1, oper = Ast.GEQ, right = EXP2}))
    | EXP LEQ EXP           (Ast.BinOpExp ({left = EXP1, oper = Ast.LEQ, right = EXP2}))
    | EXP EQ EXP            (Ast.BinOpExp ({left = EXP1, oper = Ast.EQ, right = EXP2}))
    | EXP NEQ EXP           (Ast.BinOpExp ({left = EXP1, oper = Ast.NEQ, right = EXP2}))
    | EXP GT EXP            (Ast.BinOpExp ({left = EXP1, oper = Ast.GT, right = EXP2}))
    | EXP LT EXP            (Ast.BinOpExp ({left = EXP1, oper = Ast.LT, right = EXP2}))
    | EXP AND EXP           (Ast.BinOpExp ({left = EXP1, oper = Ast.AND, right = EXP2}))
    | EXP OR EXP            (Ast.BinOpExp ({left = EXP1, oper = Ast.OR, right = EXP2}))
    | ID LPAREN PARAM RPAREN   (Ast.FuncCall ({func_id = ID, fun_args = PARAM}))
    | ID LBRAC EXP RBRAC OF EXP (Ast.ArrExp ({arr_id = ID, arr_size = EXP1, first_i = EXP2}))
    | LPAREN EXP SEMICOLON EXPS RPAREN    (Ast.SeqExp (EXP::EXPS)) 
    | IF EXP THEN EXP ELSE EXP  (Ast.IfExp ({if_cond = EXP1, body_if = EXP2, otherwise = EXP3})) 
    | IF EXP THEN EXP           (Ast.IfThenExp ({ifthen_cond = EXP1, body_ifthen = EXP2}))
    | WHILE EXP DO EXP          (Ast.WhileExp ({test_cond = EXP1, body_while = EXP2}))
    | FOR ID ASSIGN EXP TO EXP DO EXP (Ast.ForExp ({for_id = ID, first_e = EXP1, final_e = EXP2, body_for = EXP3}))
    | BREAK                      (Ast.BreakExp)
    | LVALUE ASSIGN EXP         (Ast.AssignExp ({assign_var = LVALUE, assignment = EXP}))
    | LET DECS IN EXP END       (Ast.LetExp ({decl = DECS, body_expr = EXP}))
    | LPAREN EXP RPAREN          (EXP)


PARAM : EXP                   ([EXP])
    | EXP COMMA PARAM       (EXP :: PARAM)

DEC : TYPEDEC               (Ast.TypeDec TYPEDEC)
    | FUNCDEC               (Ast.FuncDec FUNCDEC) 
    | VARDEC                (Ast.VarDec VARDEC)

DECS :                      ([])
    | DEC DECS              (DEC :: DECS)

LVALUE : ID                       (Ast.SimpleVar (ID))
       | LVALUE DOT ID          (Ast.FieldVar (LVALUE, ID))
       | ID LBRAC EXP RBRAC     (Ast.ArrVar (ID, EXP))

RECORD : ID LBRACE ARGS RBRACE  (Ast.RecordExp ({record_id = ID, field_elem = ARGS}))

ARGS : ID EQ EXP                ((ID, EXP) :: [])
     | ARGS COMMA ID EQ EXP     ((ID, EXP) :: ARGS)

TYPEDEC : TYPE ID EQ TY         ([(ID,TY)])
        | TYPE ID EQ TY TYPEDEC    ((ID,TY)::TYPEDEC)

FUNCDEC : FUNCTION ID LPAREN TYFIELD RPAREN EQ EXP ([Ast.Funcf ({funcf_id = ID, fun_args = TYFIELD, result_type = NONE, funcf_body = EXP})])
        | FUNCTION ID LPAREN TYFIELD RPAREN EQ EXP FUNCDEC (Ast.Funcf ({funcf_id = ID, fun_args = TYFIELD, result_type = NONE, funcf_body = EXP}) :: FUNCDEC)
        | FUNCTION ID LPAREN TYFIELD RPAREN COLON ID EQ EXP ([Ast.Funcf ({funcf_id = ID1, fun_args = TYFIELD, result_type = SOME(ID2), funcf_body = EXP})])
        | FUNCTION ID LPAREN TYFIELD RPAREN COLON ID EQ EXP FUNCDEC (Ast.Funcf ({funcf_id = ID1, fun_args = TYFIELD, result_type = SOME(ID2), funcf_body = EXP}) :: FUNCDEC)

VARDEC : VAR ID ASSIGN EXP              (Ast.Varf ({varf_id = ID, varf_ty = NONE, varf_first = EXP}))
       | VAR ID COLON ID ASSIGN EXP     (Ast.Varf ({varf_id = ID1, varf_ty = SOME(ID2), varf_first = EXP}))

TY : ID                         (Ast.alias (ID))
   | LBRACE TYFIELD RBRACE      (Ast.record (TYFIELD))
   | ARRAY OF ID                (Ast.arr (ID))

TYFIELD : (*EMPTY*)                 ([])
        | ID COLON ID               ([(ID1,ID2)])
        | ID COLON ID COMMA TYFIELD ((ID1,ID2) :: TYFIELD)

