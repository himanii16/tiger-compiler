type lineNo            = int
type pos               = lineNo  (* The type of Should match with expr.yacc *)
val  lineRef           = ref 0   (* reference variable to keep track of position.*)
val  posRef            = ref 0
val str = ref ""


fun updateLine n      = lineRef := !(lineRef) + n
fun updatepos  n      = posRef := !(posRef) + n 
fun resetpos ()       = posRef := 0
(* Stuff done to make use of the Tokens module generated by expr.grm *)

type svalue        = Tokens.svalue
type ('a,'b) token = ('a,'b) Tokens.token
type lexresult     = (svalue,pos) token

fun eof   ()       = Tokens.EOF (!lineRef,!posRef)


fun charsToInt m (x :: xs) = charsToInt (10 * m + ord x - ord #"0") xs
  | charsToInt m []        = m

fun toSigned (#"-" :: xs) = ~ (charsToInt 0 xs)
  | toSigned (#"~" :: xs) = ~ (charsToInt 0 xs)
  | toSigned (#"+" :: xs) =   charsToInt 0 xs
  | toSigned xs           =   charsToInt 0 xs

val toInt        = toSigned o String.explode

val newlineCount = List.length o List.filter (fn x => x = #"\n") o String.explode

%%

%header (functor TigerLexFun(structure Tokens : Tiger_TOKENS));
%s STRING COMMENT;
ws    = [\ \t\b\r]+;
digit = [0-9]+;
string = [a-zA-Z_][a-zA-Z0-9_]*; 
quote = \";
symbols = \+ | \- | \/ | \* | \= | \> | \< | \& | \: | \( | \) | \[ | \] |\{ | \} ;
char = {string}|{ws}|\\n|\.|\\|{digit}|\'| \! |\n | {symbols} ;
%%
    
<INITIAL>\n               => (updateLine 1;resetpos(); lex ()); 
<INITIAL>"*"              => (updatepos (String.size yytext); Tokens.MUL         (!lineRef, !posRef));
<INITIAL>"/"              => (updatepos (String.size yytext); Tokens.DIV         (!lineRef, !posRef));
<INITIAL>"+"              => (updatepos (String.size yytext); Tokens.PLUS        (!lineRef, !posRef));
<INITIAL>"-"              => (updatepos (String.size yytext); Tokens.MINUS       (!lineRef, !posRef));
<INITIAL>">="             => (updatepos (String.size yytext); Tokens.GEQ         (!lineRef, !posRef));
<INITIAL>"<="             => (updatepos (String.size yytext); Tokens.LEQ         (!lineRef, !posRef));
<INITIAL>"="              => (updatepos (String.size yytext); Tokens.EQ          (!lineRef, !posRef));
<INITIAL>"<>"             => (updatepos (String.size yytext); Tokens.NEQ         (!lineRef, !posRef));
<INITIAL>">"              => (updatepos (String.size yytext); Tokens.GT          (!lineRef, !posRef));
<INITIAL>"<"              => (updatepos (String.size yytext); Tokens.LT          (!lineRef, !posRef));
<INITIAL>"&"              => (updatepos (String.size yytext); Tokens.AND         (!lineRef, !posRef));
<INITIAL>"|"              => (updatepos (String.size yytext); Tokens.OR          (!lineRef, !posRef));
<INITIAL>":="             => (updatepos (String.size yytext); Tokens.ASSIGN      (!lineRef, !posRef));
<INITIAL>"["              => (updatepos (String.size yytext); Tokens.LBRAC       (!lineRef, !posRef));
<INITIAL>"]"              => (updatepos (String.size yytext); Tokens.RBRAC       (!lineRef, !posRef));
<INITIAL>"{"              => (updatepos (String.size yytext); Tokens.LBRACE      (!lineRef, !posRef));
<INITIAL>"}"              => (updatepos (String.size yytext); Tokens.RBRACE      (!lineRef, !posRef));
<INITIAL>"("              => (updatepos (String.size yytext); Tokens.LPAREN      (!lineRef, !posRef));
<INITIAL>")"              => (updatepos (String.size yytext); Tokens.RPAREN      (!lineRef, !posRef));
<INITIAL>","              => (updatepos (String.size yytext); Tokens.COMMA       (!lineRef, !posRef));
<INITIAL>";"              => (updatepos (String.size yytext); Tokens.SEMICOLON   (!lineRef, !posRef));
<INITIAL>":"              => (updatepos (String.size yytext); Tokens.COLON       (!lineRef, !posRef));
<INITIAL>"."              => (updatepos (String.size yytext); Tokens.DOT         (!lineRef, !posRef));
<INITIAL>"array"          => (updatepos (String.size yytext); Tokens.ARRAY       (!lineRef, !posRef));
<INITIAL>"if"             => (updatepos (String.size yytext); Tokens.IF          (!lineRef, !posRef));
<INITIAL>"then"           => (updatepos (String.size yytext); Tokens.THEN        (!lineRef, !posRef));
<INITIAL>"else"           => (updatepos (String.size yytext); Tokens.ELSE        (!lineRef, !posRef));
<INITIAL>"nil"            => (updatepos (String.size yytext); Tokens.NIL         (!lineRef, !posRef));
<INITIAL>"type"           => (updatepos (String.size yytext); Tokens.TYPE        (!lineRef, !posRef));
<INITIAL>"var"            => (updatepos (String.size yytext); Tokens.VAR         (!lineRef, !posRef));
<INITIAL>"let"            => (updatepos (String.size yytext); Tokens.LET         (!lineRef, !posRef));
<INITIAL>"in"             => (updatepos (String.size yytext); Tokens.IN          (!lineRef, !posRef));
<INITIAL>"end"            => (updatepos (String.size yytext); Tokens.END         (!lineRef, !posRef));
<INITIAL>"function"       => (updatepos (String.size yytext); Tokens.FUNCTION    (!lineRef, !posRef));
<INITIAL>"break"          => (updatepos (String.size yytext); Tokens.BREAK       (!lineRef, !posRef));
<INITIAL>"while"          => (updatepos (String.size yytext); Tokens.WHILE       (!lineRef, !posRef));
<INITIAL>"for"            => (updatepos (String.size yytext); Tokens.FOR         (!lineRef, !posRef));
<INITIAL>"to"             => (updatepos (String.size yytext); Tokens.TO          (!lineRef, !posRef));
<INITIAL>"do"             => (updatepos (String.size yytext); Tokens.DO          (!lineRef, !posRef));
<INITIAL>"of"             => (updatepos (String.size yytext); Tokens.OF          (!lineRef, !posRef));
<INITIAL>{string}         => (updatepos (String.size yytext); Tokens.ID          (yytext, !lineRef, !posRef));
<INITIAL>{ws}+                     => (updatepos (String.size yytext); lex());
<INITIAL>{digit}+                  => (Tokens.INT (toInt yytext, !lineRef, !posRef));

<INITIAL>"/*"             =>  (YYBEGIN COMMENT; lex());
<COMMENT>.                =>  (lex());
<COMMENT>\n               =>  (lex());
<COMMENT>"*/"             =>  (YYBEGIN INITIAL; lex());

<INITIAL>\"               =>  (YYBEGIN STRING; updatepos (String.size yytext); str := ""; lex());
<STRING>{char}+              => (updatepos (String.size yytext); str := !str ^ yytext; lex()); 
<STRING>\"                => (YYBEGIN INITIAL;updatepos (String.size yytext); Tokens.STRING      (!str, !lineRef, !posRef));
